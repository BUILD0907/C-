
#include <iostream>
#include <iomanip>
#include <stdexcept>
#include "Time.h" // include definition of class Time from Time.h
using namespace std;

// Time constructor initializes each data member 
Time::Time(int hour, int minute, int second)
{
	setTime(hour, minute, second); // validate and set time
} // end Time constructor

Time::~Time(void)
{
	cout << setfill('0') << setw(2) << getHour() << ":"<< setw(2) << getMinute() << ":" << setw(2) << getSecond()<< "Time Destructor Run!!!" << endl; // validate and set time
}

// set new Time value using universal time
void Time::setTime(int h, int m, int s)
{
	setHour(h); // set private field hour
	setMinute(m); // set private field minute
	setSecond(s); // set private field second
} // end function setTime

// set hour value
void Time::setHour(int h)
{
	if (h >= 0 )
		hour = h;
	else
		throw invalid_argument("year must > 0");
} // end function setHour

// set minute value
void Time::setMinute(int m)
{
	if (m >= 1 && m <= 12)
		minute = m;
	else
		throw invalid_argument("month must be 1-12");
} // end function setMinute

// set second value
void Time::setSecond(int s)
{
	if (s >= 1 && s <= 31)
		second = s;
	else
		throw invalid_argument("day must be 1-31");
} // end function setSecond

// return hour value
unsigned int Time::getHour() const
{
	return hour;
} // end function getHour

// return minute value
unsigned int Time::getMinute() const
{
	return minute;
} // end function getMinute

// return second value
unsigned int Time::getSecond() const
{
	return second;
} // end function getSecond

// print Time in universal-time format (HH:MM:SS)
void Time::printUniversal() const
{
	cout<<"西元" << setfill('0') << setw(2) << getHour() << ":"
		<< setw(2) << getMinute() << ":" << setw(2) << getSecond();
} // end function printUniversal

// print Time in standard-time format (HH:MM:SS AM or PM)
void Time::printStandard() const
{
	cout<< " 民國" << ((getHour() > 0 || getHour() <= 113) ? getHour() : getHour() -1911)
		<< ":" << setfill('0') << setw(2) << getMinute()
		<< ":" << setw(2) << getSecond() ;
} // end function printStandard

